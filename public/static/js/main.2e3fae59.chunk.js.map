{"version":3,"sources":["component/test.js","component/hello.js","App.js","serviceWorker.js","store/reducer.js","index.js","logo.svg"],"names":["Test","componentWillMount","self","axios","get","then","response","items","i","data","length","push","description","console","log","setState","catch","error","finally","state","selected","Button","to","SelectMenu","title","options","this","map","label","value","onSelect","item","Component","connect","name","dispatch","onNameInput","type","Hello","pathname","hash","search","props","App","className","path","exact","component","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"8QAQMA,E,4MACFC,mBAAqB,WACjB,IAAIC,EAAI,eACRC,IAAMC,IAAI,oCACTC,MAAK,SAAUC,GAGZ,IADA,IAAIC,EAAQ,GACJC,EAAE,EAAEA,EAAEF,EAASG,KAAKC,OAAOF,IAC/BD,EAAMI,KAAKL,EAASG,KAAKD,GAAGI,aAEhCC,QAAQC,IAAIP,GACZL,EAAKa,SAAS,CAACR,MAAMA,OAEtBS,OAAM,SAAUC,GAEfJ,QAAQC,IAAIG,MAEbC,SAAQ,gB,EAMfC,MAAM,CACFC,SAAS,EACTb,MAAM,I,uDAKA,IAAD,OACN,OACI,6BACK,kBAACc,EAAA,EAAD,KAAQ,kBAAC,IAAD,CAAMC,GAAG,UAAT,gBACR,kBAACC,EAAA,EAAD,CACIC,MAAM,qCACNC,QACIC,KAAKP,MAAMZ,MAAMoB,KAAI,SAAAC,GAAK,MAAK,CAAEA,QAAOC,MAAOD,MAEnDR,SAAUM,KAAKP,MAAMC,SACrBU,SAAU,SAAAC,GAAI,OAAI,EAAKhB,SAAS,CAAEK,SAAUW,EAAKF,UAEjD,kBAACR,EAAA,EAAD,KAASK,KAAKP,MAAMC,UAAY,wB,GA1CjCY,aA4DJC,eAXS,SAAAd,GACpB,MAAM,CACFe,KAAKf,EAAMe,SAGQ,SAAAC,GACvB,MAAM,CACFC,YAAa,SAACF,GAAD,OAAUC,EAAS,CAACE,KAAK,WAAWH,KAAKA,QAI/CD,CAA4CjC,GC5DrDsC,E,uKAGC,OACI,6BACK,kBAACjB,EAAA,EAAD,KAAQ,kBAAC,IAAD,CAAMC,GAAI,CACdiB,SAAS,IACTC,KAAK,UACLC,OAAO,cAHH,cAKR,2BAAIf,KAAKgB,MAAMR,W,GAVXF,aA2BLC,eAXS,SAAAd,GACpB,MAAM,CACFe,KAAKf,EAAMe,SAGQ,SAAAC,GACvB,MAAM,CACFC,YAAa,SAACF,GAAD,OAAUC,EAAS,CAACE,KAAK,WAAWH,KAAKA,QAI/CD,CAA4CK,G,QCnB5CK,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW/C,IACjC,kBAAC,IAAD,CAAO6C,KAAK,SAASC,OAAK,EAACC,UAAWT,MCCxBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCjBAC,EAAe,CACjBnB,KAAK,OAeOoB,EAZC,WAAkC,IAAjCnC,EAAgC,uDAAxBkC,EAAaE,EAAW,uCAC7C,OAAOA,EAAOlB,MACV,IAAK,WACD,kCACOlB,GADP,IAEIe,KAAMqB,EAAOrB,OAErB,QACIrB,QAAQC,IAAI,gCAEpB,OAAOK,GCHNqC,EAAQC,YAAYH,GAE1BI,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,QAGNI,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdlD,OAAM,SAAAC,GACLJ,QAAQI,MAAMA,EAAMkD,a,kGGzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.2e3fae59.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button,SelectMenu } from 'evergreen-ui'\nimport {connect} from 'react-redux';\nimport axios from \"axios\";\nimport '../App.css'\nimport {Link} from 'react-router-dom';\n\n\nclass Test extends Component {\n    componentWillMount = () => {\n        let self = this;\n        axios.get('https://www.wallpastry.com/items')\n        .then(function (response) {\n            // handle success\n            let items = [];\n            for(let i=0;i<response.data.length;i++){\n                items.push(response.data[i].description)\n            }\n            console.log(items)\n            self.setState({items:items})\n          })\n          .catch(function (error) {\n            // handle error\n            console.log(error);\n          })\n          .finally(function () {\n            // always executed\n          });\n    }\n\n    \n    state={\n        selected:0,\n        items:[],\n    }\n\n\n\n    render() { \n       return(\n           <div>\n                <Button><Link to=\"/hello\">Zu hello.js</Link></Button>\n                <SelectMenu\n                    title=\"Wähle ein Möbelstück aus!\"\n                    options={\n                        this.state.items.map(label => ({ label, value: label }))\n                    }\n                    selected={this.state.selected}\n                    onSelect={item => this.setState({ selected: item.value })}\n                    >\n                    <Button>{this.state.selected || 'Select name...'}</Button>\n                </SelectMenu>  \n            </div>\n       ) \n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        name:state.name,\n    };\n} \nconst mapDispatchToProps = dispatch => {\n    return{\n        onNameInput: (name) => dispatch({type:\"SET_NAME\",name:name}),\n    }\n}\n \nexport default connect(mapStateToProps,mapDispatchToProps)(Test);","import React, { Component } from 'react';\nimport { Button,SelectMenu } from 'evergreen-ui'\nimport {connect} from 'react-redux';\nimport axios from \"axios\";\nimport '../App.css'\nimport {Link} from 'react-router-dom';\n\n\nclass Hello extends Component {\n    \n    render() { \n       return(\n           <div>\n                <Button><Link to={{\n                    pathname:'/',\n                    hash:'#submit',\n                    search:'?id=39399'\n                }}>Zurück</Link></Button>\n                <p>{this.props.name}</p>\n            </div>\n       ) \n    }\n}\n\nconst mapStateToProps = state => {\n    return{\n        name:state.name,\n    };\n} \nconst mapDispatchToProps = dispatch => {\n    return{\n        onNameInput: (name) => dispatch({type:\"SET_NAME\",name:name}),\n    }\n}\n \nexport default connect(mapStateToProps,mapDispatchToProps)(Hello);","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Test from './component/test';\nimport Hello from './component/hello';\nimport {Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" exact component={Test}/>\n      <Route path=\"/hello\" exact component={Hello}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//Der Reducer für die Manipulation des Redux Store\nconst initialState = {\n    name:\"Max\",\n }\n \n const reducer = (state = initialState,action) => {\n     switch(action.type){\n         case \"SET_NAME\":\n             return{\n                 ...state,\n                 name: action.name\n             }\n         default:\n             console.log(\"REDUCER_DONT_KNOW_WHAT_TO_DO\");\n     }\n     return state;\n }\n export default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//Redux\nimport {createStore} from 'redux';\nimport reducer from './store/reducer';\nimport {Provider} from 'react-redux';\n//Router\nimport {BrowserRouter} from 'react-router-dom';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}